print sys.modules.keys()
print sys.platform
fList = os.listdir("/home")
/* chainging hostname*/
hostnamectl set-hostname slave
exec bash
cat /etc/hosts
espeak-ng hello

mounting permanent
 vim /etc/rc.d/rc.local
 mount /dev/cdrom /dvd

changinig ip permanent:
cd /etc/sysconfig/network-scripts/
vim ifcfg-enp0s3
--add below addresses to enp-s3 file----
IPADDR=192.168.1.105
NETMASK=255.255.255.0
GATEWAY=192.168.1.1
DNS1=192.168.1.1


cd var/www/html/jaga.html
systemctl start httpd
systemctl stop firewalld

http://192.168.0.105/jaga.html

ifconfig enp0s3

deleting or disconnecting bridge/switch/router
route del -net 0.0.0.0
route add -net 0.0.0.0 gw 192.168.122.0

changing IP address:
Manual
ifconfig enp0s3 1.2.3.4 netmask 255.255.255.0

Tunneling terminal output into other terminal:
date > /dev/pts/1
tty --- to check which terminal your are using 
w -- command used to check all the logged users into system

ssh -l root -X 192.168.0.106 firefox --will launch firefox in remote system
launching GUI in remote 
xhost + -- disable the gui root user security
echo $DISPLAY
export DISPLAY=:1

yum whatprovides nslookup

cleaning ram in linux:

cat /proc/sys/vm/drop_caches
echo 3 > /proc/sys/vm/drop_caches

CHECKING ALL THE PORT NO'S FOR SERVICES
netstat -tnlp

cd /etc/httpd/conf/


changing port no from 80 -- 90 
vim /etc/ssh/ssh_config ---for ssh port change

DISABLING SELINUX:

getenforce 
setenforce 0 # will disable 

NMAP AND USE OF NMAP

nmap -sP 192.168.0.1-10 # will scan the ip's which are active in that range
nmap -sT 192.168.0.10  # will show us what are the services running in that machine
nmap -sT -p 111 -sV 192.168.0.10 #will show what is the name of server and version also.



VI COMMANDS:
vi +10 text.txt --- will directly take us to 10th line after opening file

vi text.txt
:q --quit/exit
:wq --save and exit
:q! --exit with out saving changes
:x -- save and exit

--esc(control mode)
--i(Insert mode)
:set number
:5 --- will take us to 5th line
/search n  -- will search and n will take us to next search
yy --- copy the line
p -- will paste the line where ever you wanted
10p -- will paste 10 times 
u -- undo the changes

vim is advanced version of vi with highlighting colors for error and keywords

vim -x test.txt --- will direct us to encrypt file with passcode
----extending volumes in redhat-----
fdisk -l
pvcreate  /dev/sdc
vgcreate jaga /dev/sdc
vgdisplay jaga
lvcreate --size 6G --name jaga jaga
lvdisplay jaga/jaga
mkfs.ext4 /dev/jaga/jaga --formatting and creating volumes
mkdir /li
mount /dev/jaga/jaga /li
df -hT 
----extending additional data from other disk----
vgcreate jaga /dev/sdb
vgextend jaga /dev/sdb
vgdisplay /dev/sdb
vgdisplay jaga
lvextend --size +6G /dev/jaga/jaga
df -hT
resize2fs /dev/jaga/jaga
df -hT


Docker commands:

docker container inspect --format "{{ .NetworkSetting.IPAddress }}" <container_name>

we can install yum install net-tools inside containers


cd /var/run/httpd/ -- to kill process

DOCKER COMMANDS:
docker commit web webserver:v1 ---cloning containers

docker save webserver:v1 -o web.tar
docker load -i web.tar


docker tag web:v1  jaga/webserver:v1
docker network create --driver bridge mynet
docker network inspect mynet
docker run -dit --name c1 --network mynet myser:v1
docker container run -dit --link c1 --name c10 myser:v1
docker run -ti --name web  --network-alias site --network mynet webser:v1
docker cp  index.html web:/usr/local/apache2/htdocs/  ---copying local data to docker location
docker run -tid -p 8081:80  -v /local:/usr/local/apache2/htdocs/ --name httpserv httpd


# Masquerading allows for docker ingress and egress 
▪firewall-cmd --zone=public --add-masquerade --permanent

# Specifically allow incoming traffic on port 80/443 (nothing new here)
▪firewall-cmd --zone=public --add-port=80/tcp
▪firewall-cmd --zone=public --add-port=443/tcp

# Reload firewall to apply permanent rules
▪firewall-cmd --reload

#Restart docker 
▪systemctl restart docker

docker run --name portainer -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock  portainer/portainer


stat=$(curl  -o  /dev/null  -s  -w "%{http_code}" http://192.168.43.189:8003/index.html)

KUBERNETES COMMANDS:
minikube config set driver virtualbox
minikube dashboard
kubectl.exe version
kubectl.exe get deployment 
kubectl.exe create deployment image
kubectl.exe get pods
kubectl.exe delete pods my-image
kubectl.exe expose deployment my-image --port 80 --type=NodePort
minikube service myweb --url
kubectl.exe scale deployment my-image --replicas=3
kubectl.exe get all
kubectl.exe delete deployment my-image
kubectl exec -it my-image -- bash
kubectl set env deployment my-image --env=x=10
kubectl edit deploy  myweb-deploy
kubectl run myimage --image=tjaga77/myweb

RUNNING KUBECTL FROM LINUX:
kubectl get pods --server https://192.168.99.100:8443 --client-key /root/client.key  --client-certificate /root/client.crt --certificate-authority /root/ca.crt

#deployment is being used to overcome downtime challanges.
#by default it will use replicaSet by balancing load as some extra feature.
#Deployment uses RollingUpdates
#using below commands whenever we get new code for update we can do.
#kubectl create -f deploy.yml
#kubectl describe deployments myweb-deploy
#kubectl set image deploy myweb-deploy myweb-con=httpd:v2
#to monitor whats going behind the scene.
#kubectl get pods -w
#kubectl rollout history deploy myweb-deploy
#for maintaining history of deployments for future rollouts.
#kubectl set image deploy myweb-deploy myweb-con=httpd:v1 --record=true
#rollback changes
#kubectl rollout undo deploy myweb-deploy

minikube start
kubectl create deployment myprom --image=jaga77/prometheus
kubectl get all
kubectl expose myprom --type=NodePort --port=9090
kubectl expose deployment myprom --type=NodePort --port=9090
minikube ip
kubectl get all
kubectl create deployment mygraf --image=jaga77/grafana
kubectl expose deployment mygraf --type=NodePort --port=3000

kubectl get pods -o wide --kubeconfig config

---prometheus---
getting metrics from docker from docker endpoints
{
"metrics-addr": "192.168.56.1:1234"
"experimental": true
}


cat /etc/docker/

match => ["message" , "%{NUMBER:id},%{WORD:name},%{NUMBER:salary},%{NUMBER:product}"] }

ELK:
----elasticsearch--
docker run -dit --name elasticsearch --net elknet -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:7.7.1
docker run -dit --name elasticsearch --net elknet -p 9200:9200  -e "discovery.type=single-node" elasticsearch:7.7.1
curl 192.168.0.102:9200/_cat/indices/
 ----kibana-----
 docker run -dit --name kibana --net elknet -p 5601:5601 -e "discovery.type=single-node" kibana:7.7.1
 --logstash----
 docker run -dit --name logstash --net elknet logstash:7.7.1
 
 docker run -it --name lst --net elknet -v /lsconf:/myconf logstash:7.7.1 -f /myconf/my.conf
 
 docker run -it --name logstash --rm --net elknet -v /var/log/httpd:/log -v /lsconf:/myconf logstash:7.7.1 -f /myconf/log.conf
 
 docker run -it --name logstash --rm --net elknet  -v /lsconf:/lsconf logstash:7.7.1 -f /myconf/pln.conf
 
 docker exec -it logstash bash
 cd config/
cat logstash.yml



echo -e """
FROM centos \n
RUN yum install python3-pip -y \n
RUN pip3 install --upgrade pip3\n
RUN pip3 install tensorflow keras pandas
""" > Dockerfile

kubeadm join 192.168.1.110:6443 --token etyrwc.507wplbrv3po0z5r \
    --discovery-token-ca-cert-hash sha256:token
